@using System.Security.Claims
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject LoginService loginService
@inject AuthenticationStateProvider authStateProvider
@inject IJSRuntime JSRuntime

<link rel="preconnect" href="https://fonts.gstatic.com">
<link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500&display=swap" rel="stylesheet"> 

<div class="wrapper">
<EditForm Model="@passwordModel" OnValidSubmit="HandlePassword">
    <!--
        <label for="username">Username</label>
        <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />-->
    <h2>Change password</h2>
    <div class="input-field">
                <input type="text" required @bind="passwordModel.Pass">
                <label>Enter your new password</label>
              </div>
          <div class="input-field">
            <input type="password" required @bind="password2">
            <label>Re-enter your password</label>
          </div>
          <button type="submit">Change password</button>
          
    
    
</EditForm>
</div>

<span style="color: red">@error</span>

@code {
    [Parameter]
    public EventCallback OnClose { get; set; }
    private UserUpdateModel passwordModel = new UserUpdateModel("", "", "");
    string? password2;
    private string error = "";

    private async void HandlePassword()
    {
        var auth = await authStateProvider.GetAuthenticationStateAsync();
        passwordModel.Username = auth.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value;
        passwordModel.Email = auth.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
        
        Console.WriteLine(passwordModel.Username);
        Console.WriteLine(passwordModel.Email);
        
        if (passwordModel.Pass == password2)
        {
            error = "";
            var result = await loginService.UpdateUser(passwordModel.Username, passwordModel.Pass, passwordModel.Email);
            if (result == null)
            {
                error = "Something went wrong !";
            }
            else
            {
                CloseDialog();
            }
            
        }
        else
        {
            error = "Password don't match !";
        }
        StateHasChanged();
    }
    private async Task CloseDialog()
    {
        OnClose.InvokeAsync();
    }
}