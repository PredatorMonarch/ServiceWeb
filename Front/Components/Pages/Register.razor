@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject LoginService loginService
@inject AuthenticationStateProvider authStateProvider
@inject IJSRuntime JSRuntime

<link rel="preconnect" href="https://fonts.gstatic.com">
<link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500&display=swap" rel="stylesheet"> 

<div class="wrapper">
<EditForm Model="@registerModel" OnValidSubmit="HandleRegister">
    <!--
        <label for="username">Username</label>
        <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />-->
    <h2>Sign-up</h2>
    <div class="input-field">
        <input type="text" required @bind="registerModel.Username">
        <label>Enter your username</label>
    </div>
    <div class="input-field">
                <input type="text" required @bind="registerModel.Email">
                <label>Enter your email</label>
              </div>
          <div class="input-field">
            <input type="password" required @bind="registerModel.Pass">
            <label>Enter your password</label>
          </div>
          <button type="submit">Register</button>
          <div class="register">
            <p>Already have an account? <a href="#" @onclick="SwitchToLogin" @onclick:preventDefault>Login</a></p>
          </div>
    
    
</EditForm>
</div>

<span style="color: red">@error</span>

@code {
    [Parameter]
    public EventCallback OnSwitchToLogin { get; set; }
    private UserUpdateModel registerModel = new UserUpdateModel("", "", "");
    private string error = "";
    private ElementReference loginDialogOverlay;
    private ElementReference loginDialog;
    private ElementReference registerDialogOverlay;
    private ElementReference registerDialog;

    private async void HandleRegister()
    {
        var user = await loginService.RegisterUser(registerModel.Username, registerModel.Pass, registerModel.Email);
        if (user is UserDTO)
        {
            error = "";
            SwitchToLogin();
        }
        else
        {
            error = user;
        }
        StateHasChanged();
    }
    private async Task SwitchToLogin()
    {
        OnSwitchToLogin.InvokeAsync();
    }
}